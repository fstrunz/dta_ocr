from typing import Iterable, List
from pathlib import Path
import argparse
from calamari_ocr.ocr.predict.predictor import MultiPredictor


def create_predictor(model_path: Path) -> MultiPredictor:
    checkpoints: List[str] = [
        model_path / model_file.stem
        for model_file in model_path.iterdir()
        if model_file.isfile() and model_file.suffix == ".json"
    ]

    return MultiPredictor.from_paths(checkpoints)


def predict(facsimile_path: Path, antiqua_path: Path, fraktur_path: Path):
    docs = list(documents(facsimile_path))

    antiqua_pred = create_predictor(antiqua_path)
    fraktur_pred = create_predictor(fraktur_path)

    pass


def main():
    arg_parser = argparse.ArgumentParser(
        "predict",
        description=(
            "Given a set of facsimiles with segmentations, in the same " +
            "format as the output of segment.py, Calamari is used to " +
            "predict the contents of the generated segmentations."
        )
    )
    arg_parser.add_argument(
        "--facsimile-dir", dest="facsimile_dir", default="facsimiles",
        help=(
            "The facsimile directory as generated by download.py " +
            "and segment.py."
        )
    )
    arg_parser.add_argument(
        "--antiqua-ckpt", dest="antiqua_dir",
        default="./calamari_models_experimental/deep3_antiqua-hist/4.ckpt",
        help="The path of the Antiqua model directory to use for prediction."
    )
    arg_parser.add_argument(
        "--fraktur-dir", dest="fraktur_dir",
        default="./calamari_models_experimental/deep3_fraktur-hist",
        help="The path of the Fraktur model directory to use for prediction."
    )
    arg_parser.add_argument(
        "--corpus-dir", dest="corpus_dir", required=True,
        help="The directory the full DTA corpus was extracted to."
    )

    args = arg_parser.parse_args()
    facsimile_path = Path(args.facsimile_dir)
    if not facsimile_path.is_dir():
        print(
            f"The given facsimile path ({facsimile_path}) is not a directory!"
        )
        exit(1)

    antiqua_path = Path(args.antiqua_ckpt)
    if not antiqua_path.is_dir():
        print(
            f"The given Antiqua checkpoint ({antiqua_path}) is not a " +
            "directory!"
        )
        exit(1)

    fraktur_path = Path(args.fraktur_ckpt)
    if not fraktur_path.is_dir():
        print(
            f"The given Fraktur checkpoint ({fraktur_path}) is not a " +
            "directory!"
        )
        exit(1)

    predict(facsimile_path, antiqua_path, fraktur_path)


if __name__ == "__main__":
    main()
